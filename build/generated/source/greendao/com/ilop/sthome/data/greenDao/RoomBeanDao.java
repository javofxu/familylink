package com.ilop.sthome.data.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ilop.sthome.utils.greenDao.DeviceConverter;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROOM_BEAN".
*/
public class RoomBeanDao extends AbstractDao<RoomBean, Long> {

    public static final String TABLENAME = "ROOM_BEAN";

    /**
     * Properties of entity RoomBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Rid = new Property(2, int.class, "rid", false, "RID");
        public final static Property Room_name = new Property(3, String.class, "room_name", false, "ROOM_NAME");
        public final static Property GatewayList = new Property(4, String.class, "gatewayList", false, "GATEWAY_LIST");
        public final static Property CameraList = new Property(5, String.class, "cameraList", false, "CAMERA_LIST");
        public final static Property SubDeviceList = new Property(6, String.class, "subDeviceList", false, "SUB_DEVICE_LIST");
    }

    private final DeviceConverter gatewayListConverter = new DeviceConverter();
    private final DeviceConverter cameraListConverter = new DeviceConverter();
    private final DeviceConverter subDeviceListConverter = new DeviceConverter();

    public RoomBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RoomBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROOM_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"RID\" INTEGER NOT NULL ," + // 2: rid
                "\"ROOM_NAME\" TEXT," + // 3: room_name
                "\"GATEWAY_LIST\" TEXT," + // 4: gatewayList
                "\"CAMERA_LIST\" TEXT," + // 5: cameraList
                "\"SUB_DEVICE_LIST\" TEXT);"); // 6: subDeviceList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROOM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RoomBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
        stmt.bindLong(3, entity.getRid());
 
        String room_name = entity.getRoom_name();
        if (room_name != null) {
            stmt.bindString(4, room_name);
        }
 
        List gatewayList = entity.getGatewayList();
        if (gatewayList != null) {
            stmt.bindString(5, gatewayListConverter.convertToDatabaseValue(gatewayList));
        }
 
        List cameraList = entity.getCameraList();
        if (cameraList != null) {
            stmt.bindString(6, cameraListConverter.convertToDatabaseValue(cameraList));
        }
 
        List subDeviceList = entity.getSubDeviceList();
        if (subDeviceList != null) {
            stmt.bindString(7, subDeviceListConverter.convertToDatabaseValue(subDeviceList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RoomBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
        stmt.bindLong(3, entity.getRid());
 
        String room_name = entity.getRoom_name();
        if (room_name != null) {
            stmt.bindString(4, room_name);
        }
 
        List gatewayList = entity.getGatewayList();
        if (gatewayList != null) {
            stmt.bindString(5, gatewayListConverter.convertToDatabaseValue(gatewayList));
        }
 
        List cameraList = entity.getCameraList();
        if (cameraList != null) {
            stmt.bindString(6, cameraListConverter.convertToDatabaseValue(cameraList));
        }
 
        List subDeviceList = entity.getSubDeviceList();
        if (subDeviceList != null) {
            stmt.bindString(7, subDeviceListConverter.convertToDatabaseValue(subDeviceList));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RoomBean readEntity(Cursor cursor, int offset) {
        RoomBean entity = new RoomBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.getInt(offset + 2), // rid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // room_name
            cursor.isNull(offset + 4) ? null : gatewayListConverter.convertToEntityProperty(cursor.getString(offset + 4)), // gatewayList
            cursor.isNull(offset + 5) ? null : cameraListConverter.convertToEntityProperty(cursor.getString(offset + 5)), // cameraList
            cursor.isNull(offset + 6) ? null : subDeviceListConverter.convertToEntityProperty(cursor.getString(offset + 6)) // subDeviceList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RoomBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRid(cursor.getInt(offset + 2));
        entity.setRoom_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGatewayList(cursor.isNull(offset + 4) ? null : gatewayListConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setCameraList(cursor.isNull(offset + 5) ? null : cameraListConverter.convertToEntityProperty(cursor.getString(offset + 5)));
        entity.setSubDeviceList(cursor.isNull(offset + 6) ? null : subDeviceListConverter.convertToEntityProperty(cursor.getString(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RoomBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RoomBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RoomBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
