package com.ilop.sthome.data.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_INFO_BEAN".
*/
public class DeviceInfoBeanDao extends AbstractDao<DeviceInfoBean, Long> {

    public static final String TABLENAME = "DEVICE_INFO_BEAN";

    /**
     * Properties of entity DeviceInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GmtModified = new Property(1, long.class, "gmtModified", false, "GMT_MODIFIED");
        public final static Property CategoryImage = new Property(2, String.class, "categoryImage", false, "CATEGORY_IMAGE");
        public final static Property NetType = new Property(3, String.class, "netType", false, "NET_TYPE");
        public final static Property NodeType = new Property(4, String.class, "nodeType", false, "NODE_TYPE");
        public final static Property ProductKey = new Property(5, String.class, "productKey", false, "PRODUCT_KEY");
        public final static Property DeviceName = new Property(6, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property ProductName = new Property(7, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property IdentityAlias = new Property(8, String.class, "identityAlias", false, "IDENTITY_ALIAS");
        public final static Property IotId = new Property(9, String.class, "iotId", false, "IOT_ID");
        public final static Property Owned = new Property(10, int.class, "owned", false, "OWNED");
        public final static Property IdentityId = new Property(11, String.class, "identityId", false, "IDENTITY_ID");
        public final static Property ThingType = new Property(12, String.class, "thingType", false, "THING_TYPE");
        public final static Property Status = new Property(13, int.class, "status", false, "STATUS");
        public final static Property NickName = new Property(14, String.class, "nickName", false, "NICK_NAME");
        public final static Property IsEdgeGateway = new Property(15, int.class, "isEdgeGateway", false, "IS_EDGE_GATEWAY");
        public final static Property BinVersion = new Property(16, String.class, "binVersion", false, "BIN_VERSION");
        public final static Property SubdeviceName = new Property(17, String.class, "subdeviceName", false, "SUBDEVICE_NAME");
        public final static Property Device_ID = new Property(18, int.class, "device_ID", false, "DEVICE__ID");
        public final static Property Device_type = new Property(19, String.class, "device_type", false, "DEVICE_TYPE");
        public final static Property Device_status = new Property(20, String.class, "device_status", false, "DEVICE_STATUS");
        public final static Property Current_mode = new Property(21, int.class, "current_mode", false, "CURRENT_MODE");
        public final static Property Scene_id = new Property(22, int.class, "scene_id", false, "SCENE_ID");
    }


    public DeviceInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GMT_MODIFIED\" INTEGER NOT NULL ," + // 1: gmtModified
                "\"CATEGORY_IMAGE\" TEXT," + // 2: categoryImage
                "\"NET_TYPE\" TEXT," + // 3: netType
                "\"NODE_TYPE\" TEXT," + // 4: nodeType
                "\"PRODUCT_KEY\" TEXT," + // 5: productKey
                "\"DEVICE_NAME\" TEXT," + // 6: deviceName
                "\"PRODUCT_NAME\" TEXT," + // 7: productName
                "\"IDENTITY_ALIAS\" TEXT," + // 8: identityAlias
                "\"IOT_ID\" TEXT," + // 9: iotId
                "\"OWNED\" INTEGER NOT NULL ," + // 10: owned
                "\"IDENTITY_ID\" TEXT," + // 11: identityId
                "\"THING_TYPE\" TEXT," + // 12: thingType
                "\"STATUS\" INTEGER NOT NULL ," + // 13: status
                "\"NICK_NAME\" TEXT," + // 14: nickName
                "\"IS_EDGE_GATEWAY\" INTEGER NOT NULL ," + // 15: isEdgeGateway
                "\"BIN_VERSION\" TEXT," + // 16: binVersion
                "\"SUBDEVICE_NAME\" TEXT," + // 17: subdeviceName
                "\"DEVICE__ID\" INTEGER NOT NULL ," + // 18: device_ID
                "\"DEVICE_TYPE\" TEXT," + // 19: device_type
                "\"DEVICE_STATUS\" TEXT," + // 20: device_status
                "\"CURRENT_MODE\" INTEGER NOT NULL ," + // 21: current_mode
                "\"SCENE_ID\" INTEGER NOT NULL );"); // 22: scene_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGmtModified());
 
        String categoryImage = entity.getCategoryImage();
        if (categoryImage != null) {
            stmt.bindString(3, categoryImage);
        }
 
        String netType = entity.getNetType();
        if (netType != null) {
            stmt.bindString(4, netType);
        }
 
        String nodeType = entity.getNodeType();
        if (nodeType != null) {
            stmt.bindString(5, nodeType);
        }
 
        String productKey = entity.getProductKey();
        if (productKey != null) {
            stmt.bindString(6, productKey);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(7, deviceName);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(8, productName);
        }
 
        String identityAlias = entity.getIdentityAlias();
        if (identityAlias != null) {
            stmt.bindString(9, identityAlias);
        }
 
        String iotId = entity.getIotId();
        if (iotId != null) {
            stmt.bindString(10, iotId);
        }
        stmt.bindLong(11, entity.getOwned());
 
        String identityId = entity.getIdentityId();
        if (identityId != null) {
            stmt.bindString(12, identityId);
        }
 
        String thingType = entity.getThingType();
        if (thingType != null) {
            stmt.bindString(13, thingType);
        }
        stmt.bindLong(14, entity.getStatus());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(15, nickName);
        }
        stmt.bindLong(16, entity.getIsEdgeGateway());
 
        String binVersion = entity.getBinVersion();
        if (binVersion != null) {
            stmt.bindString(17, binVersion);
        }
 
        String subdeviceName = entity.getSubdeviceName();
        if (subdeviceName != null) {
            stmt.bindString(18, subdeviceName);
        }
        stmt.bindLong(19, entity.getDevice_ID());
 
        String device_type = entity.getDevice_type();
        if (device_type != null) {
            stmt.bindString(20, device_type);
        }
 
        String device_status = entity.getDevice_status();
        if (device_status != null) {
            stmt.bindString(21, device_status);
        }
        stmt.bindLong(22, entity.getCurrent_mode());
        stmt.bindLong(23, entity.getScene_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGmtModified());
 
        String categoryImage = entity.getCategoryImage();
        if (categoryImage != null) {
            stmt.bindString(3, categoryImage);
        }
 
        String netType = entity.getNetType();
        if (netType != null) {
            stmt.bindString(4, netType);
        }
 
        String nodeType = entity.getNodeType();
        if (nodeType != null) {
            stmt.bindString(5, nodeType);
        }
 
        String productKey = entity.getProductKey();
        if (productKey != null) {
            stmt.bindString(6, productKey);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(7, deviceName);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(8, productName);
        }
 
        String identityAlias = entity.getIdentityAlias();
        if (identityAlias != null) {
            stmt.bindString(9, identityAlias);
        }
 
        String iotId = entity.getIotId();
        if (iotId != null) {
            stmt.bindString(10, iotId);
        }
        stmt.bindLong(11, entity.getOwned());
 
        String identityId = entity.getIdentityId();
        if (identityId != null) {
            stmt.bindString(12, identityId);
        }
 
        String thingType = entity.getThingType();
        if (thingType != null) {
            stmt.bindString(13, thingType);
        }
        stmt.bindLong(14, entity.getStatus());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(15, nickName);
        }
        stmt.bindLong(16, entity.getIsEdgeGateway());
 
        String binVersion = entity.getBinVersion();
        if (binVersion != null) {
            stmt.bindString(17, binVersion);
        }
 
        String subdeviceName = entity.getSubdeviceName();
        if (subdeviceName != null) {
            stmt.bindString(18, subdeviceName);
        }
        stmt.bindLong(19, entity.getDevice_ID());
 
        String device_type = entity.getDevice_type();
        if (device_type != null) {
            stmt.bindString(20, device_type);
        }
 
        String device_status = entity.getDevice_status();
        if (device_status != null) {
            stmt.bindString(21, device_status);
        }
        stmt.bindLong(22, entity.getCurrent_mode());
        stmt.bindLong(23, entity.getScene_id());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceInfoBean readEntity(Cursor cursor, int offset) {
        DeviceInfoBean entity = new DeviceInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // gmtModified
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // categoryImage
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // netType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nodeType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // productKey
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // deviceName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // productName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // identityAlias
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // iotId
            cursor.getInt(offset + 10), // owned
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // identityId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // thingType
            cursor.getInt(offset + 13), // status
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // nickName
            cursor.getInt(offset + 15), // isEdgeGateway
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // binVersion
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // subdeviceName
            cursor.getInt(offset + 18), // device_ID
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // device_type
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // device_status
            cursor.getInt(offset + 21), // current_mode
            cursor.getInt(offset + 22) // scene_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceInfoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGmtModified(cursor.getLong(offset + 1));
        entity.setCategoryImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNetType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNodeType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProductKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDeviceName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProductName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIdentityAlias(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIotId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOwned(cursor.getInt(offset + 10));
        entity.setIdentityId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setThingType(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStatus(cursor.getInt(offset + 13));
        entity.setNickName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIsEdgeGateway(cursor.getInt(offset + 15));
        entity.setBinVersion(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSubdeviceName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDevice_ID(cursor.getInt(offset + 18));
        entity.setDevice_type(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDevice_status(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCurrent_mode(cursor.getInt(offset + 21));
        entity.setScene_id(cursor.getInt(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceInfoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceInfoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceInfoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
