package com.ilop.sthome.data.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ilop.sthome.utils.greenDao.converter.SceneRelationConverter;
import com.ilop.sthome.utils.greenDao.converter.SceneSwitchConverter;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCENE_BEAN".
*/
public class SceneBeanDao extends AbstractDao<SceneBean, Long> {

    public static final String TABLENAME = "SCENE_BEAN";

    /**
     * Properties of entity SceneBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ModleName = new Property(1, String.class, "modleName", false, "MODLE_NAME");
        public final static Property Choice = new Property(2, int.class, "choice", false, "CHOICE");
        public final static Property Sid = new Property(3, int.class, "sid", false, "SID");
        public final static Property DeviceName = new Property(4, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property Color = new Property(5, String.class, "color", false, "COLOR");
        public final static Property Code = new Property(6, String.class, "code", false, "CODE");
        public final static Property Scene_default = new Property(7, byte.class, "scene_default", false, "SCENE_DEFAULT");
        public final static Property SwitchList = new Property(8, String.class, "switchList", false, "SWITCH_LIST");
        public final static Property RelationList = new Property(9, String.class, "relationList", false, "RELATION_LIST");
    }

    private final SceneSwitchConverter switchListConverter = new SceneSwitchConverter();
    private final SceneRelationConverter relationListConverter = new SceneRelationConverter();

    public SceneBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SceneBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCENE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MODLE_NAME\" TEXT," + // 1: modleName
                "\"CHOICE\" INTEGER NOT NULL ," + // 2: choice
                "\"SID\" INTEGER NOT NULL ," + // 3: sid
                "\"DEVICE_NAME\" TEXT," + // 4: deviceName
                "\"COLOR\" TEXT," + // 5: color
                "\"CODE\" TEXT," + // 6: code
                "\"SCENE_DEFAULT\" INTEGER NOT NULL ," + // 7: scene_default
                "\"SWITCH_LIST\" TEXT," + // 8: switchList
                "\"RELATION_LIST\" TEXT);"); // 9: relationList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCENE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SceneBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String modleName = entity.getModleName();
        if (modleName != null) {
            stmt.bindString(2, modleName);
        }
        stmt.bindLong(3, entity.getChoice());
        stmt.bindLong(4, entity.getSid());
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(5, deviceName);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(6, color);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(7, code);
        }
        stmt.bindLong(8, entity.getScene_default());
 
        List switchList = entity.getSwitchList();
        if (switchList != null) {
            stmt.bindString(9, switchListConverter.convertToDatabaseValue(switchList));
        }
 
        List relationList = entity.getRelationList();
        if (relationList != null) {
            stmt.bindString(10, relationListConverter.convertToDatabaseValue(relationList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SceneBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String modleName = entity.getModleName();
        if (modleName != null) {
            stmt.bindString(2, modleName);
        }
        stmt.bindLong(3, entity.getChoice());
        stmt.bindLong(4, entity.getSid());
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(5, deviceName);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(6, color);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(7, code);
        }
        stmt.bindLong(8, entity.getScene_default());
 
        List switchList = entity.getSwitchList();
        if (switchList != null) {
            stmt.bindString(9, switchListConverter.convertToDatabaseValue(switchList));
        }
 
        List relationList = entity.getRelationList();
        if (relationList != null) {
            stmt.bindString(10, relationListConverter.convertToDatabaseValue(relationList));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SceneBean readEntity(Cursor cursor, int offset) {
        SceneBean entity = new SceneBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // modleName
            cursor.getInt(offset + 2), // choice
            cursor.getInt(offset + 3), // sid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // color
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // code
            (byte) cursor.getShort(offset + 7), // scene_default
            cursor.isNull(offset + 8) ? null : switchListConverter.convertToEntityProperty(cursor.getString(offset + 8)), // switchList
            cursor.isNull(offset + 9) ? null : relationListConverter.convertToEntityProperty(cursor.getString(offset + 9)) // relationList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SceneBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setModleName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChoice(cursor.getInt(offset + 2));
        entity.setSid(cursor.getInt(offset + 3));
        entity.setDeviceName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setColor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setScene_default((byte) cursor.getShort(offset + 7));
        entity.setSwitchList(cursor.isNull(offset + 8) ? null : switchListConverter.convertToEntityProperty(cursor.getString(offset + 8)));
        entity.setRelationList(cursor.isNull(offset + 9) ? null : relationListConverter.convertToEntityProperty(cursor.getString(offset + 9)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SceneBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SceneBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SceneBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
