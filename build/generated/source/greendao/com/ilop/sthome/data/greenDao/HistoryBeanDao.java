package com.ilop.sthome.data.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_BEAN".
*/
public class HistoryBeanDao extends AbstractDao<HistoryBean, Long> {

    public static final String TABLENAME = "HISTORY_BEAN";

    /**
     * Properties of entity HistoryBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, long.class, "time", false, "TIME");
        public final static Property Code = new Property(2, String.class, "code", false, "CODE");
        public final static Property Device_id = new Property(3, int.class, "device_id", false, "DEVICE_ID");
        public final static Property Device_type = new Property(4, String.class, "device_type", false, "DEVICE_TYPE");
        public final static Property Device_status = new Property(5, String.class, "device_status", false, "DEVICE_STATUS");
        public final static Property DeviceName = new Property(6, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property ActivityTime = new Property(7, String.class, "activityTime", false, "ACTIVITY_TIME");
        public final static Property ActivtiyTimeDetail = new Property(8, String.class, "activtiyTimeDetail", false, "ACTIVTIY_TIME_DETAIL");
    }


    public HistoryBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIME\" INTEGER NOT NULL ," + // 1: time
                "\"CODE\" TEXT," + // 2: code
                "\"DEVICE_ID\" INTEGER NOT NULL ," + // 3: device_id
                "\"DEVICE_TYPE\" TEXT," + // 4: device_type
                "\"DEVICE_STATUS\" TEXT," + // 5: device_status
                "\"DEVICE_NAME\" TEXT," + // 6: deviceName
                "\"ACTIVITY_TIME\" TEXT," + // 7: activityTime
                "\"ACTIVTIY_TIME_DETAIL\" TEXT);"); // 8: activtiyTimeDetail
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTime());
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
        stmt.bindLong(4, entity.getDevice_id());
 
        String device_type = entity.getDevice_type();
        if (device_type != null) {
            stmt.bindString(5, device_type);
        }
 
        String device_status = entity.getDevice_status();
        if (device_status != null) {
            stmt.bindString(6, device_status);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(7, deviceName);
        }
 
        String activityTime = entity.getActivityTime();
        if (activityTime != null) {
            stmt.bindString(8, activityTime);
        }
 
        String activtiyTimeDetail = entity.getActivtiyTimeDetail();
        if (activtiyTimeDetail != null) {
            stmt.bindString(9, activtiyTimeDetail);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTime());
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
        stmt.bindLong(4, entity.getDevice_id());
 
        String device_type = entity.getDevice_type();
        if (device_type != null) {
            stmt.bindString(5, device_type);
        }
 
        String device_status = entity.getDevice_status();
        if (device_status != null) {
            stmt.bindString(6, device_status);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(7, deviceName);
        }
 
        String activityTime = entity.getActivityTime();
        if (activityTime != null) {
            stmt.bindString(8, activityTime);
        }
 
        String activtiyTimeDetail = entity.getActivtiyTimeDetail();
        if (activtiyTimeDetail != null) {
            stmt.bindString(9, activtiyTimeDetail);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryBean readEntity(Cursor cursor, int offset) {
        HistoryBean entity = new HistoryBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.getInt(offset + 3), // device_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // device_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // device_status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // deviceName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // activityTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // activtiyTimeDetail
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.getLong(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDevice_id(cursor.getInt(offset + 3));
        entity.setDevice_type(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDevice_status(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDeviceName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setActivityTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setActivtiyTimeDetail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
