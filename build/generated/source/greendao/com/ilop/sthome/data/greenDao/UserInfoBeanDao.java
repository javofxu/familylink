package com.ilop.sthome.data.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO_BEAN".
*/
public class UserInfoBeanDao extends AbstractDao<UserInfoBean, Long> {

    public static final String TABLENAME = "USER_INFO_BEAN";

    /**
     * Properties of entity UserInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdentityId = new Property(1, String.class, "identityId", false, "IDENTITY_ID");
        public final static Property LoginId = new Property(2, String.class, "loginId", false, "LOGIN_ID");
        public final static Property LoginName = new Property(3, String.class, "loginName", false, "LOGIN_NAME");
        public final static Property LoginSource = new Property(4, String.class, "loginSource", false, "LOGIN_SOURCE");
        public final static Property NickName = new Property(5, String.class, "nickName", false, "NICK_NAME");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
        public final static Property AvatarUrl = new Property(8, String.class, "avatarUrl", false, "AVATAR_URL");
        public final static Property GmtCreate = new Property(9, String.class, "gmtCreate", false, "GMT_CREATE");
        public final static Property GmtModified = new Property(10, String.class, "gmtModified", false, "GMT_MODIFIED");
    }


    public UserInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IDENTITY_ID\" TEXT," + // 1: identityId
                "\"LOGIN_ID\" TEXT," + // 2: loginId
                "\"LOGIN_NAME\" TEXT," + // 3: loginName
                "\"LOGIN_SOURCE\" TEXT," + // 4: loginSource
                "\"NICK_NAME\" TEXT," + // 5: nickName
                "\"PHONE\" TEXT," + // 6: phone
                "\"EMAIL\" TEXT," + // 7: email
                "\"AVATAR_URL\" TEXT," + // 8: avatarUrl
                "\"GMT_CREATE\" TEXT," + // 9: gmtCreate
                "\"GMT_MODIFIED\" TEXT);"); // 10: gmtModified
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String identityId = entity.getIdentityId();
        if (identityId != null) {
            stmt.bindString(2, identityId);
        }
 
        String loginId = entity.getLoginId();
        if (loginId != null) {
            stmt.bindString(3, loginId);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(4, loginName);
        }
 
        String loginSource = entity.getLoginSource();
        if (loginSource != null) {
            stmt.bindString(5, loginSource);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(6, nickName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(9, avatarUrl);
        }
 
        String gmtCreate = entity.getGmtCreate();
        if (gmtCreate != null) {
            stmt.bindString(10, gmtCreate);
        }
 
        String gmtModified = entity.getGmtModified();
        if (gmtModified != null) {
            stmt.bindString(11, gmtModified);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String identityId = entity.getIdentityId();
        if (identityId != null) {
            stmt.bindString(2, identityId);
        }
 
        String loginId = entity.getLoginId();
        if (loginId != null) {
            stmt.bindString(3, loginId);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(4, loginName);
        }
 
        String loginSource = entity.getLoginSource();
        if (loginSource != null) {
            stmt.bindString(5, loginSource);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(6, nickName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(9, avatarUrl);
        }
 
        String gmtCreate = entity.getGmtCreate();
        if (gmtCreate != null) {
            stmt.bindString(10, gmtCreate);
        }
 
        String gmtModified = entity.getGmtModified();
        if (gmtModified != null) {
            stmt.bindString(11, gmtModified);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfoBean readEntity(Cursor cursor, int offset) {
        UserInfoBean entity = new UserInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // identityId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // loginId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // loginName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // loginSource
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // email
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // avatarUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // gmtCreate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // gmtModified
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdentityId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLoginId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLoginName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLoginSource(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNickName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAvatarUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGmtCreate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGmtModified(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
